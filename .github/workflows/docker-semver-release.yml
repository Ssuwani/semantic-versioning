name: Docker Build and Push

on:
  # 수동 실행을 위한 workflow_dispatch 추가
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version upgrade type (major/minor/patch)'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
  # 필요한 경우 자동 트리거도 유지, 자동으로 트리거된 경우 patch 버전 배포 (브랜치 전략에 따라 삭제 혹은 브랜치 변경)
  push:
    branches: [ main ]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
    
    - name: Determine version bump
      id: semver
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          bump_type="${{ github.event.inputs.version_type }}"
        else
          bump_type="patch"
        fi
        
        # 현재 버전에서 새 버전 계산
        current_version=${latest_tag#v}
        IFS='.' read -r major minor patch <<< "$current_version"
        
        case $bump_type in
          major)
            new_version="$((major + 1)).0.0"
            ;;
          minor)
            new_version="${major}.$((minor + 1)).0"
            ;;
          patch)
            new_version="${major}.${minor}.$((patch + 1))"
            ;;
        esac
        
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT
        echo "New version will be: ${new_version}"

  build:
    needs: version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/your-image:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/your-image:v${{ needs.version.outputs.new_version }}

    - name: Update Version in values.yaml
      run: |
        cd deploy
        # yq를 사용하여 values.yaml 업데이트
        yq eval ".image.tag = \"v${{ needs.version.outputs.new_version }}\"" -i values.yaml

    - name: Commit and Push Changes
      run: |
        cd argocd-config
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        git commit -m "chore: update image tag to v${{ needs.version.outputs.new_version }}"
        git push

    - name: Create Git tag
      run: |
        git tag v${{ needs.version.outputs.new_version }}
        git push origin v${{ needs.version.outputs.new_version }}